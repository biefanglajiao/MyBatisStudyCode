<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="UserMapper.xml">
<!--    <mapper namespace="org.mybatis.example.User">-->
    <resultMap id="userMap" type="org.example.domain.User">
        <!-- 当数据库的属性名和自定义类的属性名不一致时使用-->
        <id property="id" column="uid"/>
        <result property="name" column="uname"/>
    </resultMap>

    <select id="selectUserid" parameterType="Integer" resultMap="userMap">
        select *
        from user
        where uid=#{id}
    </select>
    <select id="selectUser" parameterType="String" resultMap="userMap">
        select *
        from user
        where uname = #{name}
    </select>
    <select id="selectall" resultMap="userMap">
        select *
        from user
    </select>
    <insert id="insert" parameterType="org.example.domain.User">
        insert into user(uname)
        values (#{name})
    </insert>
    <update id="update" parameterType="org.example.domain.User">
        update user
        set uname=#{name}
        where uid = #{id}
    </update>
    <!-- 删除元素-->
    <delete id="delete" parameterType="org.example.domain.User">
        delete
        from user
        where uid = #{id}
    </delete>
    <!--  sql元素的使用： 提高代码片段复用率 -->
    <sql id="11">uid
    =
    #{id}
    and
    uname
    =
    #{name}</sql>
    <select id="sqlTableSelect" parameterType="org.example.domain.User" resultMap="userMap">
        select * from user where
        <include refid="11"></include>               <!--等价于  uid=#{id} and uname=#{name}  -->
    </select>
    <!-- if 标签的使用   💥：where子句后and对应  if标签的  and  （第一个前没有；有会报错）-->
    <select id="ifTableSelect1" parameterType="org.example.domain.User" resultMap="userMap">
        select * from user where
        <if test="id!=null and id!='' ">
            uid=#{id}
        </if>
    </select>
    <select id="ifTableSelect2" parameterType="org.example.domain.User" resultMap="userMap">
        select * from user where 1=1
        <if test="id!=null and id!='' ">
            and uid=#{id}
        </if>
        <if test="name!=null and name!='' ">
            and uname=#{name}
        </if>
        <!---判空条件为!=null和name!=''      单引号里面不嫩有空格     -->
    </select>
    <select id="WhereTableSelect" parameterType="org.example.domain.User" resultMap="userMap">
        select * from user
        <where>
            <if test="id!=null and id!='' ">
                and uid=#{id}
            </if>
            <if test="name!=null and name!='' ">
                and uname=#{name}
            </if>
            <!---使用where标签时 就不用1=1这种危险的格式；标签会帮你处理and留还是不留   -->
        </where>
    </select>
    <select id="trimTableSelect" parameterType="org.example.domain.User" resultMap="userMap">
        select * from user
        <trim prefix="where" prefixOverrides="and">
            <if test="id!=null and id!='' ">
                and uid=#{id}
            </if>
            <if test="name!=null and name!='' ">
                and uname=#{name}
            </if>
            <!---使用where标签时 就不用1=1这种危险的格式；标签会帮你处理and留还是不留   -->
        </trim>
    </select>
    <update id="setupdate" parameterType="org.example.domain.User">
        update user
        <set>
            <if test="name!=null and name!=''">
                uname=#{name}
            </if>
            <where>
                <if test="id!=null and id!='' ">
                    uid=#{id}
                </if>
            </where>
        </set>
    </update>
    <update id="tirmupdate" parameterType="org.example.domain.User">
        update user
        <trim prefix="set" prefixOverrides=","><!---如果有多个set 中间分割用 ","-->
            <if test="name!=null and name!=''">
                uname=#{name}
            </if>
            <where>
                <if test="id!=null and id!='' ">
                    uid=#{id}
                </if>
            </where>
        </trim>
    </update>
    <select id="foreacheSelectShuzu" parameterType="org.example.domain.User" resultMap="userMap">
        select * from user
        <where>
            uid in
            <foreach item="id" collection="array" open="(" separator="," close=")">
                #{id}
            </foreach>
        </where>
    </select>
    <select id="foreacheSelectlist" parameterType="org.example.domain.User" resultMap="userMap">
        select * from user
        <where>
            uid in
            <foreach item="id"  collection="list" open="(" separator="," close=")">
                #{id}
            </foreach>
        </where>
    </select>
    <select id="foreacheSelectMap" parameterType="org.example.domain.User" resultMap="userMap">
        select * from user
        <where>
            uid in
            <foreach item="id" collection="ids" open="(" separator="," close=")">
                #{id}
            </foreach>
        </where>
    </select>
    <!--- index没啥用 item就是#{} collection只有map类写对应map类的key值-->

</mapper>